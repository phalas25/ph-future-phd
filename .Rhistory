qPCR_Gli = filter(Target.Name == "Gli1")
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
View(qPCR_Gapdh)
View(qPCR_Gapdh)
View(qPCR_Gli)
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_Gli1 %>% avg(group_by(Sample.Name)) %>%  -> y
qPCR_Gli1 %>% avg(group_by(Sample.Name))  -> y
qPCR_Gli1 %>% average(group_by(Sample.Name))  -> y
install.packages('numpy')
install.packages('Numpy')
qPCR_Gli1 %>% mean(group_by(Sample.Name))  -> y
qPCR_Gli1 %>% mean(select(Sample.Name).group_by(Sample.Name))  -> y
qPCR_Gli1Avg <- aggregate(qPCR_Gli1[, 3], list(qPCR_Gli1$Sample.Name), mean)
View(qPCR_Gli1Avg)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1[3], list(qPCR_Gli1$Sample.Name), mean)
sapply(qPCR_Gli1, class)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut[,3] <- sapply(qPCR_cut[, 2], as.numeric)
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
qPCR_Gli1Avg <- aggregate(qPCR_Gli1[,3], list(qPCR_Gli1$Sample.Name), mean)
qPCR_Gli1Avg
qPCR_Gli1Avg
qPCR_cut[,3] <- sapply(qPCR_cut[, 2], as.numeric)
sapply(qPCR_cut,class)
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(Target.Name + Sample.Name ~ Cт, list(qPCR_Gli1$Sample.Name), mean)
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1$Target.Name + qPCR_Gli1$Sample.Name ~ qPCR_Gli1$Cт, list(qPCR_Gli1$Sample.Name), mean)
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1$Sample.Name ~ qPCR_Gli1$Cт + qPCR_Gli1$Target.Name, list(qPCR_Gli1$Sample.Name), mean)
View(qPCR_Gli1Avg)
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1$Sample.Name ~ qPCR_Gli1$Cт, list(qPCR_Gli1$Sample.Name), mean)
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1[,3], list(qPCR_Gli1$Sample.Name), mean)
View(qPCR_Gli1Avg)
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1Avg <- aggregate(qPCR_Gli1[,3], list(qPCR_Gli1$Sample.Name), mean)
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
slice(which.mean(Cт)) -> x
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
slice(mean(Cт)) -> x
View(x)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut[,3] <- sapply(qPCR_cut[, 2], as.numeric)
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
slice(mean(Cт)) -> x
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
mean(Cт) -> x
print(mean(c(4,5,6)))
print(mean(c(4,5,6,7)))
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
summarise(Sample.Name,Target.Name,avgCт = mean(Cт)) -> x
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
summarise(Target.Name,avgCт = mean(Cт)) -> x
#qPCR_Gli1[,3] <- sapply(qPCR_Gli1[, 2], as.numeric)
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
summarise(avgCт = mean(Cт)) -> x
View(x)
x = mean(qPCR_cut$Cт)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut[,3] <- sapply(qPCR_cut[, 2], as.numeric)
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
x = mean(qPCR_cut$Cт)
qPCR_cut$Cт
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
View(qPCR_Gli1)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
View(qPCR_cut)
qPCR_cut <- sapply(qPCR_cut[, 3], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
View(qPCR_cut)
qPCR_cut1 <- sapply(qPCR_cut[, 3], as.numeric)
qPCR_cut1 <- lapply(qPCR_cut[, 3], as.numeric)
View(qPCR_cut1)
qPCR_cut1 <- apply(qPCR_cut[, 3], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut1 <- apply(qPCR_cut[, 3], as.numeric)
qPCR_cut1 <- sapply(qPCR_cut[Cт], as.numeric)
qPCR_cut1 <- sapply(qPCR_cut["Cт"], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut1 <- sapply(qPCR_cut[qPCR_cut$Cт], as.numeric)
qPCR_cut1 <- apply(qPCR_cut[qPCR_cut$Cт], as.numeric)
qPCR_cut = qPCR_cut [8: nrow(qPCR_cut),]
View(qPCR_cut)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
#qPCR_cut = qPCR_cut [8: nrow(qPCR_cut),]
qPCR_cut1 <- sapply(qPCR_cut[qPCR_cut$Cт], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
#qPCR_cut = qPCR_cut [8: nrow(qPCR_cut),]
qPCR_cut1 <- sapply(qPCR_cut[qPCR_cut$Cт], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт") %>% sapply(qPCR_cut[], as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт") %>% sapply( as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт") %>% sapply([,3] as.numeric)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut$Cт <- as.numeric(qPCR_cut$Cт)
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut$Cт <- as.numeric(qPCR_cut$Cт)
sapply(qPCR_cut,class)
qPCR_cut$Cт
qPCR_cut$Cт <- as.float(qPCR_cut$Cт)
qPCR_cut$Cт <- as.numeric(qPCR_cut$Cт)
qPCR_cut
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut
qPCR_cut$Cт <- as.numeric(qPCR_cut$Cт[8:])
qPCR_cut$Cт <- as.numeric(as.character(qPCR_cut$Cт))
qPCR_cut$Cт
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
qPCR_Gli1 %>%
group_by(Sample.Name) %>%
summarise(avgCт = mean(Cт)) -> x
View(x)
View(x)
qPCR_Gapdh %>%
group_by(Sample.Name) %>%
summarise(avgCт = mean(Cт)) -> y
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> x
qPCR_Gapdh %>%
group_by(Sample.Name) %>%
summarise(avgCт = mean(Cт)) -> y
#x = qPCR_cut %>% group_by(Sample.Name,Target.Name)
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> x
qPCR_Gapdh %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> y
View(x)
View(y)
NEW = merge(x,y, by = "Sample.Name" )
View(NEW)
Merged = merge(x,y, by = "Sample.Name" )
i
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> Gli
qPCR_Gapdh %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> GAPDH
Merged = merge(Gli,GAPDH, by = "Sample.Name" )
View(Merged)
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> Gli
qPCR_Gapdh %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> GAPDH
na.rm = T))
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> Gli
qPCR_Gapdh %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> GAPDH
View(GAPDH)
View(Gli)
Merged = merge(Gli,GAPDH, by = "Sample.Name" )
View(Merged)
Merged['DeltaCT'] = Merged$avgCт.x - Merged$avgCт.y
View(Merged)
Merged$Sample.Name <- as.character(Merged$Sample.Name)
sapply(Merged,class)
Merged %>% filter(!grepl('3T3', Sample.Name)) -> wt
Merged %>% filter(grepl('3T3', Sample.Name)) -> bcc
View(bcc)
View(wt)
View(bcc)
Merged %>% filter(!grepl('3T3', Sample.Name)) -> bcc
Merged %>% filter(grepl('3T3', Sample.Name)) -> wt
View(wt)
subtract_me = bcc[1,5]
subtract_me = bcc[1,6]
subtract_me = bcc[1,6]
Merged['DeltaDeltaCT'] = bcc$DeltaCT - subtract_me
View(Merged)
bcc['DeltaDeltaCT'] = bcc$DeltaCT - subtract_me
subtract_me = wt[1,6]
wt['DeltaDeltaCT'] = wt$DeltaCT - subtract_me
View(wt)
Stacked = rbind(wt,bcc)
View(Stacked)
Stacked['Fold Change'] = 2**(-1*Stacked$DeltaDeltaCT)
View(Stacked)
#Filter based on 3T3 and not 3T3
Merged %>% filter(grepl('3T3', Sample.Name)) -> wt
Merged %>% filter(grepl('BCC', Sample.Name)) -> bcc
#
subtract_me = bcc[1,6]
bcc['DeltaDeltaCT'] = bcc$DeltaCT - subtract_me
subtract_me = wt[1,6]
wt['DeltaDeltaCT'] = wt$DeltaCT - subtract_me
Stacked = rbind(wt,bcc)
Stacked['Fold Change'] = 2**(-1*Stacked$DeltaDeltaCT)
#install qPCR analysis tool from CRAN
install.packages('pcr')
#load necessary libraries
library(pcr)
library(ggplot2)
#this one does not seem to exist
library(cowplot)
#load remaining libraries
library(dplyr)
library(xtable)
library(readr)
install.packages('sqldf')
library(sqldf)
#import and rename data set. Remember it needs to be in Git working directory!
qPCR_raw <- read.csv ("11_5_19_qPCR_raw_1.csv", header = TRUE)
colnames(qPCR_raw)
#rename column names
colnames(qPCR_raw) <- c("Well", "Sample.Name", "Target.Name", "Task", "Reporter", "Quencher", "RQ", "RQ Min", "RQ Max", "Cт")
colnames(qPCR_raw)
#cut out the first 6 rows and the last 5 rows that have no data
qPCR_c = qPCR_raw [7: nrow(qPCR_raw),]
head(qPCR_c)
qPCR_c1 = qPCR_c [1: (nrow(qPCR_c)-5),]
#make a new table with just Sample Name, Target Name and CT
colnames(qPCR_c1)
qPCR_c2 = qPCR_c1 [, 1:10]
qPCR_cut <- select(qPCR_c2, "Sample.Name", "Target.Name", "Cт")
qPCR_cut$Cт <- as.numeric(as.character(qPCR_cut$Cт))
qPCR_cut$Cт
#filter by gli and GAPDH
qPCR_cut %>% filter(Target.Name == "Gli1") -> qPCR_Gli1
qPCR_cut %>% filter(Target.Name == "GAPDH")-> qPCR_Gapdh
#Take avg of CT for each group
qPCR_Gli1 %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> Gli
#Take avg of CT for each group
qPCR_Gapdh %>%
group_by(Sample.Name,Target.Name) %>%
summarise(avgCт = mean(Cт)) -> GAPDH
#Merge Gli and GAPDH back together
Merged = merge(Gli,GAPDH, by = "Sample.Name" )
#Create DeltaCT
Merged['DeltaCT'] = Merged$avgCт.x - Merged$avgCт.y
#Change Sample.Name column to string
Merged$Sample.Name <- as.character(Merged$Sample.Name)
#Filter based on 3T3 and not 3T3
Merged %>% filter(grepl('3T3', Sample.Name)) -> wt
Merged %>% filter(grepl('BCC', Sample.Name)) -> bcc
#Get 0 m value to subtract from all samples of bcc
subtract_me = bcc[1,6]
bcc['DeltaDeltaCT'] = bcc$DeltaCT - subtract_me
#Get 0 m value to subtract from all samples of wt
subtract_me = wt[1,6]
wt['DeltaDeltaCT'] = wt$DeltaCT - subtract_me
#Stack wt and bcc on top of each other
Stacked = rbind(wt,bcc)
#Create fold change column with calculation based on DeltaDeltaCT
Stacked['Fold Change'] = 2**(-1*Stacked$DeltaDeltaCT)
View(Stacked)
#plot Fold Change versus sample name using ggplot
library(ggplot2)
geom_col(Stacked, aes(x = "Sample.Name", y = "Fold.Change", color= "Sample.Name"))
ggplot(Stacked, aes(x = "Sample.Name", y = "Fold.Change", color= "Sample.Name"))
Final <- Stacked
View(Final)
ggplot(Final, aes(x = "Sample.Name", y = "Fold.Change", color= "Sample.Name"))
#Create fold change column with calculation based on DeltaDeltaCT
Stacked['Fold Change'] = 2**(-1*Stacked$DeltaDeltaCT)
#plot Fold Change versus sample name using ggplot
library(ggplot2)
ggplot(Stacked, aes(x = "Sample.Name", y = "Fold.Change", color= "Sample.Name"))
geom_col(Stacked, aes(x = "Sample.Name", y = "Fold.Change", color= "Sample.Name"))
ggplot() + geom_col(data = Stacked, aes(x = "Sample.Name", y = "Fold.Change", color = "Sample.Name"))
ggplot((data = Stacked, aes(x = "Sample.Name", y = "Fold.Change", color = "Sample.Name") + geom_col()
ggplot((Stacked, aes(x = "Sample.Name", y = "Fold.Change", color = "Sample.Name") + geom_col()
ggplot() + geom_col(data = Stacked, aes(x = 'Sample Name', y = 'Fold Change', color = 'Sample.Name'))
#plot Fold Change versus sample name using ggplot
Stacked %>%
group_by(Sample.Name) %>%
library(ggplot2)
View(Stacked)
Fold Change <- Stacked %>%
group_by(Sample.Name) %>%
#plot Fold Change versus sample name using ggplot
Fold_Change = Stacked %>%
group_by(Sample.Name)
#plot Fold Change versus sample name using ggplot
Fold_Change = (Stacked group_by(Sample.Name))
#Generate table with just sample name and fold change to plot
Fold_Change <- select(Stacked, "Sample.Name", "Fold.Change")
colnames(Stacked)
#Generate table with just sample name and fold change to plot
Fold_Change <- select(Stacked, "Sample.Name", "Fold Change")
View(Fold_Change)
#plot Fold Change versus sample name using ggplot
library(ggplot2)
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change', color = 'Sample.Name'))
#Create fold change column with calculation based on DeltaDeltaCT
Stacked['Fold Change'] = 2**(-1*Stacked$DeltaDeltaCT)
View(Stacked)
#Generate table with just sample name and fold change to plot
Fold_Change <- select(Stacked, "Sample.Name", "Fold Change")
#plot Fold Change versus sample name using ggplot
install.packages(ggplot2)
#plot Fold Change versus sample name using ggplot
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change', color = 'Sample.Name'))
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change'))
ggplot() + geom_col(data = Fold_Change, aes(x = Sample.Name, y = Fold Change))
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change'))
library(gapminder)
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
Fold_Change <- gapminder %>%
filter (Sample.Name == "3T3") %>%
filter (Sample.Name == "BCC")
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change'))
library(ggplot2)
gplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change'))
gplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change', color = 'Sample.Name'))
library(ggplot2)
ggplot() + geom_col(data = Fold_Change, aes(x = 'Sample.Name', y = 'Fold Change', color = 'Sample.Name'))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = 'Sample.Name'))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
FC_Plot<- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
View(FC_Plot)
View(FC_Plot)
library(ggplot2)
FC_Plot<- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
FC_Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
FC_Plot <- theme_update(text = element_text(size=20))
FC_Plot <- theme_update(text = element_text(size=10))
View(FC_Plot)
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
theme_update(text = element_text(size=20))
theme_update(text = element_text(size=20))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
theme_update(text = element_text(size=10))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
theme_update(text = element_text(size=6))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
theme_update(text = element_text(size=8))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
theme_update(text = element_text(size=6))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, color = Fold_Change$Sample.Name))
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
ggtitle("Plot of Fold Change")
ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
ggtitle("Plot of Fold Change")
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plo t= ggtitle("Plot of Fold Change")
Plot = ggtitle("Plot of Fold Change")
Plot + ggtitle("Plot of Fold Change")
Plot <- ggtitle("Plot of Fold Change")
Plot + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plot + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
Plot + theme(
plot.title = element_text(color="black", size=14, face="plain"),
axis.title.x = element_text(color="black", size=14, face="plain"),
axis.title.y = element_text(color="black", size=14, face="plain")
)
Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot + theme(
plot.title = element_text(color="black", size=14, face="plain"),
axis.title.x = element_text(color="black", size=14, face="plain"),
axis.title.y = element_text(color="black", size=14, face="plain")
)
Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- Plot + theme(
plot.title = element_text(color="black", size=14, face="plain"),
axis.title.x = element_text(color="black", size=14, face="plain"),
axis.title.y = element_text(color="black", size=14, face="plain")
)
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- Plot + theme(
plot.title = element_text(color="black", size=14, face="plain"),
axis.title.x = element_text(color="black", size=14, face="plain"),
axis.title.y = element_text(color="black", size=14, face="plain")
)
Plot <- Plot + theme(
plot.title = element_text(color="black", size=16, face="plain"),
axis.title.x = element_text(color="black", size=16, face="plain"),
axis.title.y = element_text(color="black", size=16, face="plain")
)
Plot <- Plot + theme(
plot.title = element_text(color="black", size=20, face="plain"),
axis.title.x = element_text(color="black", size=20, face="plain"),
axis.title.y = element_text(color="black", size=20, face="plain")
)
Plot <- Plot + labs(fill = "Sample Name")
theme_update(text = element_text(size=6))
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- Plot + theme(
plot.title = element_text(color="black", size=20, face="plain"),
axis.title.x = element_text(color="black", size=20, face="plain"),
axis.title.y = element_text(color="black", size=20, face="plain")
)
Plot <- Plot + labs(fill = "Sample Name")
#Generate table with just sample name and fold change to plot
Fold_Change <- select(Stacked, "Sample.Name", "Fold Change")
#plot Fold Change versus sample name using ggplot
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
theme_update(text = element_text(size=6))
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- Plot + theme(
plot.title = element_text(color="black", size=20, face="plain"),
axis.title.x = element_text(color="black", size=20, face="plain"),
axis.title.y = element_text(color="black", size=20, face="plain")
)
Plot <- Plot + labs(fill = "Sample Name")
Plot + theme_classic(Plot)
Plot + theme_classic(Plot)
Plot <- Plot + theme(
plot.title = element_text(color="black", size=20, face="plain"),
axis.title.x = element_text(color="black", size=20, face="plain"),
axis.title.y = element_text(color="black", size=20, face="plain")
)
+ theme_classic(Plot)
Plot <- theme_classic(Plot)
Plot + theme_classic()
theme_update(text = element_text(size=6))
Plot + theme_update(text = element_text(size=6))
Plot + theme_classic(text = element_text(size=6))
Plot + theme_classic(text = element_text(size=6))
Plot + theme_classic()
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain")
Plot + theme_classic()
Plot + theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
Plot + theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"),
Plot + theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
Plot + theme_classic()
Plot + theme_update(text = element_text(size=12))
Plot + theme_classic (theme_update(text = element_text(size=12)))
Plot + theme_classic()
Plot + theme(axis.text=element_text(size=6))
Plot + theme(axis.text=element_text(size=12))
Plot + theme_classic()
Plot + theme(axis.text=element_text(size=6))
Plot + theme_classic()
Plot + theme_classic(axis.text.x = element_text(size = 14),)
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot <- theme_classic()
Plot + theme_classic()
Plot <- theme_classic()
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot_classic <- theme_classic()
theme_update(text = element_text(size=6))
Plot <- ggplot() + geom_col(data = Fold_Change, aes(x = Fold_Change$Sample.Name, y = Fold_Change$`Fold Change`, fill = Fold_Change$Sample.Name))
Plot <- Plot + ggtitle("Plot of GLI1 Fold Change") +
xlab("Sample Name") + ylab("Fold Change")
Plot_classic <- theme_classic()
Plot_classic <- element_text(size = 8)
Plot_classic <- theme_classic()
Plot_classic <- element_text(size = 6)
Plot_classic <- element_text(size = 6)
